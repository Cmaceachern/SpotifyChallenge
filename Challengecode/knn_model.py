# -*- coding: utf-8 -*-
"""KNN-Tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1db2eAEA9BJ_W05ym1xB8sX6KVrVfsp3V
"""

import numpy as np
import pandas as pd

import scipy
import matplotlib.pyplot as plt
from pylab import rcParams
import urllib
import sklearn
from sklearn.neighbors import KNeighborsClassifier
from sklearn import neighbors
from sklearn import preprocessing
from sklearn.model_selection import train_test_split

from sklearn import metrics

import requests
import io

# Commented out IPython magic to ensure Python compatibility.
np.set_printoptions(precision=4, suppress = True)
# %matplotlib inline
rcParams['figure.figsize']=7,4
plt.style.use('seaborn-whitegrid')

"""Splitting Data into Test and Training Sets"""

url = "https://raw.githubusercontent.com/theengineeringworld/Python-data-science/master/mtcars.csv" # Make sure the url is the raw version of the file on GitHub
download = requests.get(url).content

# Reading the downloaded content and turning it into a pandas dataframe

cars = pd.read_csv(io.StringIO(download.decode('utf-8')))

cars.columns = ['car_names','mpg','cyl','disp','hp','drat','wt','qsec','vs', 'am','gear','carb']

# Printing out the first 5 rows of the dataframe

print (cars.head())

X_prime = cars.iloc[:,[1,3,4,6]].values
y = cars.iloc[:,9].values

# Reading the downloaded content and turning it into a pandas dataframe

songs = pd.read_csv('/content/updated (2).csv')

songs.columns = ['track_id', 'artist_name', 'track_name', 'pid', 'x_pos', 'y_pos']

# Printing out the first 5 rows of the dataframe

print (songs.head())

X_prime = songs.iloc[:,[4,5]].values
y = songs.iloc[:,5].values

X = preprocessing.scale()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .33, random_state = 17)

"""**Building and Training the model with training data**

"""

int_array_x = X_train.astype(int)
int_array_y = y_train.astype(int)
clf = neighbors.KNeighborsClassifier()
clf.fit(int_array_x,int_array_y)
print(clf.leaf_size)

"""**Evaluating your model's predictions against the test dataset**"""

y_expect = y_test
y_pred = clf.predict(X_test)

print(metrics.classification_report(y_expect, y_pred))